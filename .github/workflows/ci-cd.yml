name: CI/CD Pipeline (Branch based)

on:
  push:
    branches:
      - dev
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GH_NEW_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build and Push Docker Image
        run: |
          # Define image and tag based on the branch name
          IMAGE_NAME=ghcr.io/${{ github.repository_owner }}/nextjs-cicd
          TAG=${{ github.ref_name }}

          echo "Building Docker image: $IMAGE_NAME:$TAG"

          docker build -t $IMAGE_NAME:$TAG -f Dockerfile .
          docker push $IMAGE_NAME:$TAG

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code (with .env files)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine Environment and Domain
        id: set-env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
            echo "ENV=test" >> $GITHUB_ENV
            echo "PORT=3001" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "ENV=prod" >> $GITHUB_ENV
            echo "PORT=3000" >> $GITHUB_ENV
          fi

          # Check if .env exists before reading
          if [ -f ".env" ]; then
            DOMAIN=$(grep DOMAIN .env | cut -d '=' -f2)
            echo "DOMAIN=${DOMAIN}" >> $GITHUB_ENV
          else
            echo "DOMAIN=example.com" >> $GITHUB_ENV
            echo "Warning: .env file not found, using default domain" >&2
          fi

      - name: SSH and Deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "Deploying to ${{ env.ENV }} environment (${{ env.DOMAIN }})"

            # Set image dynamically
            IMAGE_NAME=ghcr.io/${{ github.repository_owner }}/nextjs-cicd:${{ github.ref_name }}

            # Create project directory
            mkdir -p ~/nextjs-cicd && cd ~/nextjs-cicd

            # Pull new image
            echo "Pulling Docker image: $IMAGE_NAME"
            echo "${{ secrets.GH_NEW_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            docker pull $IMAGE_NAME

            if [ ! -f docker-compose.yml ]; then
              cat > docker-compose.yml <<EOL
            version: '3'
            services:
              app:
                image: \$IMAGE_NAME
                restart: always
                ports:
                  - "\$PORT:3000"
                environment:
                  - NODE_ENV=\$NODE_ENV
            EOL
            fi

            echo "PORT=${{ env.PORT }}" > .env
            echo "NODE_ENV=${{ env.ENV }}" >> .env
            echo "IMAGE_NAME=$IMAGE_NAME" >> .env

            docker compose down || true
            docker compose up -d

            echo "Successfully deployed to ${{ env.DOMAIN }}"
